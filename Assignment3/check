==6518== Memcheck, a memory error detector
==6518== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==6518== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==6518== Command: ./route_manager 2 temp.txt
==6518== 
==6518== Syscall param openat(filename) points to unaddressable byte(s)
==6518==    at 0x4F4DC3E: open (open64.c:47)
==6518==    by 0x4ECA528: _IO_file_open (fileops.c:189)
==6518==    by 0x4ECA528: _IO_file_fopen@@GLIBC_2.2.5 (fileops.c:281)
==6518==    by 0x4EBCE59: __fopen_internal (iofopen.c:78)
==6518==    by 0x4EBCE59: fopen@@GLIBC_2.2.5 (iofopen.c:89)
==6518==    by 0x108F18: main (route_manager.c:100)
==6518==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==6518== 
==6518== Invalid read of size 1
==6518==    at 0x108F21: main (route_manager.c:102)
==6518==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==6518== 
==6518== 
==6518== Process terminating with default action of signal 11 (SIGSEGV)
==6518==  Access not within mapped region at address 0x0
==6518==    at 0x108F21: main (route_manager.c:102)
==6518==  If you believe this happened as a result of a stack
==6518==  overflow in your program's main thread (unlikely but
==6518==  possible), you can try to increase the size of the
==6518==  main thread stack using the --main-stacksize= flag.
==6518==  The main thread stack size used in this run was 8388608.
==6518== 
==6518== HEAP SUMMARY:
==6518==     in use at exit: 0 bytes in 0 blocks
==6518==   total heap usage: 1 allocs, 1 frees, 552 bytes allocated
==6518== 
==6518== All heap blocks were freed -- no leaks are possible
==6518== 
==6518== For counts of detected and suppressed errors, rerun with: -v
==6518== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
